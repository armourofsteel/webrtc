<!DOCTYPE html>
<html>
<head>
	<title>WebRtc Practice</title>
	<link rel="stylesheet" type="text/css" href="style.css">
	<script src="/socket.io/socket.io.js"> </script>
</head>
<body>

<video id="myVideo" autoplay></video>
<video id="otherVideo" autoplay></video>

 <!--Chat HTML -->
 <div>
 	<label>Your Name: </label><input id="myName" type="text"/>
 	<label>Message: </label><input id="myMessage" type="text"/>
 	<input id="sendMessage" type="submit"/>
 	<div id="chatArea">Message Output:</br></div>
 	<div id="signalingArea">Signaling Message: </br></div>
 </div>

<script>
var myVideoArea = document.getElementById("myVideo");
var otherVideoArea = document.getElementById("otherVideo");
//Text Chat variables:
var myName = document.getElementById("myName");
var myMessage = document.getElementById("myMessage");
var sendMessage = document.getElementById("sendMessage");
var chatArea = document.getElementById("chatArea");
//Signaling Variable
var signalingArea = document.getElementById("signalingArea");
var ROOM = "chat";
var SIGNAL_ROOM = "signal_room";
var configuration = {
	'iceServers': [{
		'url': 'stun:stun.l.google.com:19302'
	}]
};
var rtcPeerConn;



//Make a call to connect socket IO server:
io = io.connect();
io.emit('ready',{"chat_room": ROOM, "signal_room": SIGNAL_ROOM});

io.emit('signal',{
	"type": "user_here",
	"message": "Are you ready for a call ??",
	"room": SIGNAL_ROOM
});

io.on('signaling_message', function(data){
	displaySignalingMessage("Signal Received: " + data.type);

		if(!rtcPeerConn)
			startSignaling();
		

	if(data.type != "user_here"){
		var message = JSON.parse(data.message);
		
		if(message.sdp){
			rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp),function(){
					if(rtcPeerConn.remoteDescription.type == 'offer'){
						rtcPeerConn.createAnswer(sendLocalDesc, logError);
					}
				}, logError);
		}
		else{
			rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
		}
	}
});

function startSignaling(){
	displaySignalingMessage("start signaling...");
	rtcPeerConn = new webkitRTCPeerConnection(configuration);

//Setting event handler : To send any ice candidates to the other peer
	rtcPeerConn.onicecandidate = function(evt){
		if(evt.candidate){
			io.emit('signal', {"type": "ice candidate", "message": JSON.stringify({'candidate': evt.candidate}),"room":"SIGNAL_ROOM"});
			displaySignalingMessage("Completed that ice candidate...");
		}
	};

// Let the 'negotiationneeded' event trigger offer generation
	rtcPeerConn.onnegotiationneeded = function(){
		displaySignalingMessage("on negotiation called");
		rtcPeerConn.createOffer(sendLocalDesc, logError);
	}
//Event other stream arrives
	rtcPeerConn.onaddstream = function(evt){
		displaySignalingMessage("Goint to add their stream...");
		otherVideoArea.src = URL.createObjectURL(evt.stream);
	};

// Get our local meadia stream so that we can se whats exactly visible on other person screen;
	navigator.getUserMedia = navigator.getUserMedia || navigator.wenkitGetUserMedia || navigator.mozGetUserMedia;

	navigator.getUserMedia({
		'audio': false,
		'video': true
	}, function(stream){
		displaySignalingMessage("Going to display my stream...");
		myVideoArea.src = URL.createObjectURL(stream);
		rtcPeerConn.addStream(stream);
	}, logError);
}


//D=Signaling Discription
	function sendLocalDesc(desc){
	rtcPeerConn.setLocalDescription(desc, function(){
	displaySignalingMessage("Sending Local Description...");
	
	io.emit('signal',{"type":"SDP", 
					  "message": JSON.stringify({"sdp": rtcPeerConn.localDescription}),
					  "room": SIGNAL_ROOM}); 
		}, logError);
	}		

//Error log function
 	function logError(error){
 			displaySignalingMessage(error.name + ': '+ error.message);
 	}



io.on('announce', function(data){
	displayMessage(data.message);
});

io.on('message', function(data){
	displayMessage(data.author+": "+data.message);
});

//Update Chat tag
function displayMessage(message){
	 chatArea.innerHTML = chatArea.innerHTML +"<br>"+ message; 
}

//Update Signalng Tag
function displaySignalingMessage(message){
	 signalingArea.innerHTML = signalingArea.innerHTML +"<br/>"+ message; 
}

sendMessage.addEventListener('click', function(ev){
		io.emit('send', {
			"author": myName.value,
			 "message": myMessage.value,
			 "room": ROOM 	
			});
		ev.preventDefault();
	}, false);

	
</script>	
</body>
</html>